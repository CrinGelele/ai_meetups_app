# Generated by Django 5.1.1 on 2024-12-10 00:21

import django.contrib.auth.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Speaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=35)),
                ('last_name', models.CharField(max_length=35)),
                ('workplace', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('img_url', models.TextField(blank=True, null=True)),
                ('deletion_flag', models.BooleanField(default=0)),
            ],
            options={
                'db_table': 'speakers',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='Логин')),
                ('password', models.CharField(max_length=50, verbose_name='Пароль')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Является ли пользователь менеджером?')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Является ли пользователь админом?')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Meetup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=15)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('submit_date', models.DateTimeField(blank=True, null=True)),
                ('resolve_date', models.DateTimeField(blank=True, null=True)),
                ('topic', models.TextField(blank=True, null=True)),
                ('meetup_date', models.DateTimeField(blank=True, null=True)),
                ('viewers', models.IntegerField(blank=True, null=True)),
                ('moderator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='moderator_action', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_action', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'meetups',
            },
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approx_perfomance_duration', models.IntegerField(blank=True, null=True)),
                ('meetup', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='speakers.meetup')),
                ('speaker', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='speakers.speaker')),
            ],
            options={
                'db_table': 'invites',
                'constraints': [models.UniqueConstraint(fields=('speaker', 'meetup'), name='UQ_Invites_speaker_id_and_meetup_id')],
            },
        ),
    ]
